# Example showing mmap syscall.
# Create a new segment using mmap, save the address, write to it.
#
# To run:
#   $ ./subx translate init.linux examples/ex12.subx -o examples/ex12
#   $ ./subx run examples/ex12
# You shouldn't get a segmentation fault.

== code
#   instruction                     effective address                                                   register    displacement    immediate
# . op          subop               mod             rm32          base        index         scale       r32
# . 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

Entry:
    # mmap(Mmap-new-segment->len)
    bb/copy-to-ebx  Mmap-new-segment/imm32
    e8/call  syscall_mmap/disp32

    # write to *eax to check that we have access to the newly-allocated segment
    c7          0/subop/copy        0/mod/direct    0/rm32/eax    .           .             .           .           .               0x34/imm32        # copy to *eax

    # exit(eax)
    89/copy                         3/mod/direct    3/rm32/ebx    .           .             .           0/r32/eax   .               .                 # copy eax to ebx
    e8/call  syscall_exit/disp32

== data

# various constants used here were found in the Linux sources (search for file mman-common.h)
Mmap-new-segment:  # type mmap_arg_struct
    # addr
    0/imm32
    # len
    0x100/imm32
    # protection flags
    3/imm32  # PROT_READ | PROT_WRITE
    # sharing flags
    0x22/imm32  # MAP_PRIVATE | MAP_ANONYMOUS
    # fd
    -1/imm32  # since MAP_ANONYMOUS is specified
    # offset
    0/imm32  # since MAP_ANONYMOUS is specified

# . . vim:nowrap:textwidth=0

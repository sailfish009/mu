#!/bin/sh
# returns 0 on successful build or nothing to build
# non-zero exit status only on error during building
set -e  # stop immediately on error

# [0-9]*.cc -> transect.cc -> transect_bin
# (layers)   |              |
#          tangle          $CXX

# can also be called with a layer to only build until
#   $ ./build --until 050
UNTIL_LAYER=${2:-zzz}

# there's two mechanisms for fast builds here:
# - if a command is quick to run, always run it but update the result only on any change
# - otherwise run it only if the output is 'older_than' the inputs
#
# avoid combining both mechanisms for a single file
# otherwise you'll see spurious messages about files being updated
# risk: a file may unnecessarily update without changes, causing unnecessary work downstream

test "$CXX" || export CXX=c++
test "$CC" || export CC=cc
test "$CFLAGS" || export CFLAGS="-g -O3"
export CFLAGS="$CFLAGS -Wall -Wextra -ftrapv -fno-strict-aliasing"

# return 1 if $1 is older than _any_ of the remaining args
older_than() {
  local target=$1
  shift
  if [ ! -e $target ]
  then
#?     echo "$target doesn't exist"
    echo "updating $target" >&2
    return 0  # success
  fi
  local f
  for f in $*
  do
    if [ $f -nt $target ]
    then
      echo "updating $target" >&2
      return 0  # success
    fi
  done
  return 1  # failure
}

# redirect to $1, unless it's already identical
update() {
  if [ ! -e $1 ]
  then
    cat > $1
  else
    cat > $1.tmp
    diff -q $1 $1.tmp >/dev/null  &&  rm $1.tmp  ||  mv $1.tmp $1
  fi
}

update_cp() {
  if [ ! -e $2/$1 ]
  then
    cp $1 $2
  elif [ $1 -nt $2/$1 ]
  then
    cp $1 $2
  fi
}

noisy_cd() {
  cd $1
  echo "-- `pwd`" >&2
}

older_than ../enumerate/enumerate ../enumerate/enumerate.cc && {
  $CXX $CFLAGS ../enumerate/enumerate.cc -o ../enumerate/enumerate
}

older_than ../tangle/tangle ../tangle/*.cc && {
  noisy_cd ../tangle
    {
      grep -h "^struct .* {" [0-9]*.cc  |sed 's/\(struct *[^ ]*\).*/\1;/'
      grep -h "^typedef " [0-9]*.cc
    }  |update type_list
    grep -h "^[^ #].*) {" [0-9]*.cc  |sed 's/ {.*/;/'  |update function_list
    ls [0-9]*.cc  |grep -v "\.test\.cc$"  |sed 's/.*/#include "&"/'  |update file_list
    ls [0-9]*.test.cc  |sed 's/.*/#include "&"/'  |update test_file_list
    grep -h "^[[:space:]]*void test_" [0-9]*.cc  |sed 's/^\s*void \(.*\)() {$/\1,/'  |update test_list
    grep -h "^\s*void test_" [0-9]*.cc  |sed 's/^\s*void \(.*\)() {.*/"\1",/'  |update test_name_list
    $CXX $CFLAGS boot.cc -o tangle
    ./tangle test
  noisy_cd ../transect  # no effect; just to show us returning to the parent directory
}

LAYERS=$(../enumerate/enumerate --until $UNTIL_LAYER  |grep '.cc$')
older_than transect.cc $LAYERS ../enumerate/enumerate ../tangle/tangle && {
  # no update here; rely on 'update' calls downstream
  ../tangle/tangle $LAYERS  > transect.cc
}

grep -h "^[^[:space:]#].*) {$" transect.cc  |grep -v ":.*("  |sed 's/ {.*/;/'  |update function_list
grep -h "^\s*void test_" transect.cc  |sed 's/^\s*void \(.*\)() {.*/\1,/'  |update test_list
grep -h "^\s*void test_" transect.cc  |sed 's/^\s*void \(.*\)() {.*/"\1",/'  |update test_name_list

older_than transect_bin transect.cc *_list && {
  $CXX $CFLAGS transect.cc -o transect_bin
}

exit 0
